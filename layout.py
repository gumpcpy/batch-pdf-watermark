# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'layout.ui'
#
# Created by: PyQt5 UI code generator 5.15.8
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QDialog
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import time,sys,os,datetime
from core import WatermarkCore


class Ui_MainWindow(object):
    thePath = {}
    thePath['pdf_path'] = ''
    thePath['txt_path'] = ''

    thePath['water_x'] = ''
    thePath['water_y'] = ''
    thePath['water_r'] = ''
    thePath['water_font_size'] = ''
    thePath['water_trans'] = ''

    LAST_DIR = '.' #上次打開的路徑記錄在setting.ini    

    # 獲取應用程序的執行路徑
    appDirPath = os.path.dirname(os.path.abspath(sys.argv[0]))
    # # 前往上一級目錄
    appDirPathPre = os.path.abspath(os.path.join(appDirPath, os.pardir))       
    appDirPathPre2 = os.path.abspath(os.path.join(appDirPathPre, os.pardir))
    appDirPathPre3 = os.path.abspath(os.path.join(appDirPathPre2, os.pardir))   
    settings_path = os.path.join(appDirPathPre3,'Settings.ini')
    print("Settings路徑在:" + settings_path)
    
    # settings_path = 'Settings.ini' 
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(682, 736)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btn_txt_path = QtWidgets.QPushButton(self.centralwidget)
        self.btn_txt_path.setGeometry(QtCore.QRect(470, 70, 150, 40))
        font = QtGui.QFont()
        font.setFamily(".PingFang TC")
        self.btn_txt_path.setFont(font)
        self.btn_txt_path.setObjectName("btn_txt_path")
        self.btn_pdf_path = QtWidgets.QPushButton(self.centralwidget)
        self.btn_pdf_path.setGeometry(QtCore.QRect(470, 120, 150, 40))
        font = QtGui.QFont()
        font.setFamily(".PingFang TC")
        self.btn_pdf_path.setFont(font)
        self.btn_pdf_path.setObjectName("btn_pdf_path")
        self.water_x = QtWidgets.QSpinBox(self.centralwidget)
        self.water_x.setGeometry(QtCore.QRect(100, 250, 81, 24))
        self.water_x.setMaximum(40)
        self.water_x.setSingleStep(1)
        self.water_x.setProperty("value", 5)
        self.water_x.setObjectName("water_x")
        self.water_y = QtWidgets.QSpinBox(self.centralwidget)
        self.water_y.setGeometry(QtCore.QRect(210, 250, 81, 24))
        self.water_y.setMaximum(50)
        self.water_y.setProperty("value", 5)
        self.water_y.setObjectName("water_y")
        self.water_r = QtWidgets.QSpinBox(self.centralwidget)
        self.water_r.setGeometry(QtCore.QRect(320, 250, 81, 24))
        self.water_r.setMaximum(180)
        self.water_r.setProperty("value", 30)
        self.water_r.setObjectName("water_r")
        self.water_font_size = QtWidgets.QSpinBox(self.centralwidget)
        self.water_font_size.setGeometry(QtCore.QRect(430, 250, 81, 24))
        self.water_font_size.setMaximum(500)
        self.water_font_size.setSingleStep(5)
        self.water_font_size.setProperty("value", 90)
        self.water_font_size.setObjectName("water_font_size")
        self.water_trans = QtWidgets.QSpinBox(self.centralwidget)
        self.water_trans.setGeometry(QtCore.QRect(540, 250, 81, 24))
        self.water_trans.setMaximum(100)
        self.water_trans.setSingleStep(10)
        self.water_trans.setProperty("value", 40)
        self.water_trans.setObjectName("water_trans")
        self.progressBar = QtWidgets.QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(50, 360, 551, 23))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.prog_begin = QtWidgets.QLabel(self.centralwidget)
        self.prog_begin.setGeometry(QtCore.QRect(40, 380, 81, 21))
        self.prog_begin.setObjectName("prog_begin")
        self.prog_now = QtWidgets.QLabel(self.centralwidget)
        self.prog_now.setGeometry(QtCore.QRect(280, 380, 81, 21))
        self.prog_now.setText("")
        self.prog_now.setObjectName("prog_now")
        self.prog_tol = QtWidgets.QLabel(self.centralwidget)
        self.prog_tol.setGeometry(QtCore.QRect(520, 380, 81, 21))
        self.prog_tol.setText("")
        self.prog_tol.setObjectName("prog_tol")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(110, 230, 41, 16))
        font = QtGui.QFont()
        font.setFamily(".PingFang TC")
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(220, 230, 41, 16))
        font = QtGui.QFont()
        font.setFamily(".PingFang TC")
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(330, 230, 51, 16))
        font = QtGui.QFont()
        font.setFamily(".PingFang TC")
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(440, 230, 61, 16))
        font = QtGui.QFont()
        font.setFamily(".PingFang TC")
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(550, 230, 41, 16))
        font = QtGui.QFont()
        font.setFamily(".PingFang TC")
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.btn_start = QtWidgets.QPushButton(self.centralwidget)
        self.btn_start.setGeometry(QtCore.QRect(50, 290, 561, 61))
        font = QtGui.QFont()
        font.setFamily(".PingFang HK")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btn_start.setFont(font)
        self.btn_start.setObjectName("btn_start")
        self.input_txt_path = QtWidgets.QLineEdit(self.centralwidget)
        self.input_txt_path.setGeometry(QtCore.QRect(130, 70, 321, 31))
        self.input_txt_path.setObjectName("input_txt_path")
        self.input_pdf_path = QtWidgets.QLineEdit(self.centralwidget)
        self.input_pdf_path.setGeometry(QtCore.QRect(130, 120, 321, 31))
        self.input_pdf_path.setObjectName("input_pdf_path")
        self.logArea = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.logArea.setGeometry(QtCore.QRect(160, 420, 451, 131))
        self.logArea.setObjectName("logArea")
        self.btn_clearLog = QtWidgets.QPushButton(self.centralwidget)
        self.btn_clearLog.setGeometry(QtCore.QRect(470, 560, 150, 40))
        font = QtGui.QFont()
        font.setFamily(".PingFang HK")
        self.btn_clearLog.setFont(font)
        self.btn_clearLog.setObjectName("btn_clearLog")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 620, 579, 31))
        font = QtGui.QFont()
        font.setFamily(".PingFang TC")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(40, 80, 71, 16))
        font = QtGui.QFont()
        font.setFamily(".PingFang TC")
        font.setPointSize(14)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(40, 130, 71, 16))
        font = QtGui.QFont()
        font.setFamily(".PingFang TC")
        font.setPointSize(14)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(40, 20, 571, 41))
        font = QtGui.QFont()
        font.setFamily(".PingFang TC")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(40, 250, 41, 16))
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(40, 480, 41, 16))
        font = QtGui.QFont()
        font.setFamily(".PingFang HK")
        font.setPointSize(14)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(110, 620, 41, 41))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("logo.png"))
        self.label_2.setScaledContents(True)
        self.label_2.setObjectName("label_2")
        self.input_font_path = QtWidgets.QLineEdit(self.centralwidget)
        self.input_font_path.setGeometry(QtCore.QRect(130, 170, 321, 31))
        self.input_font_path.setObjectName("input_font_path")
        self.btn_font_path = QtWidgets.QPushButton(self.centralwidget)
        self.btn_font_path.setGeometry(QtCore.QRect(470, 170, 150, 40))
        font = QtGui.QFont()
        font.setFamily(".PingFang TC")
        self.btn_font_path.setFont(font)
        self.btn_font_path.setObjectName("btn_font_path")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(40, 180, 71, 16))
        font = QtGui.QFont()
        font.setFamily(".PingFang TC")
        font.setPointSize(14)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 682, 24))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        # short cut close app
        closeAction = QtWidgets.QAction('Close', MainWindow)
        closeAction.setShortcut('Ctrl+Q')
        closeAction.setStatusTip('Close Plugin')
        closeAction.triggered.connect(MainWindow.close)
        
        # Marker: Show System Log  
        self.th = MyThread()
        self.th.signalForText.connect(self.onUpdateText)        
        sys.stdout = self.th        
        
        # Set All Function 
        self.progressBar.setVisible(False)
        self.progressBar.setMinimum(0)
        self.progressBar.setMaximum(100)
        self.btn_txt_path.clicked.connect(self.CallFileChoose_TXT) 
        self.btn_pdf_path.clicked.connect(self.CallFileChoose_PDF)
        self.btn_font_path.clicked.connect(self.CallFileChoose_FONT)
        self.btn_start.clicked.connect(self.CallCoreClass)
        self.btn_clearLog.clicked.connect(self.ClearLog)
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "無限水印"))
        self.btn_txt_path.setText(_translate("MainWindow", "添加檔案"))
        self.btn_pdf_path.setText(_translate("MainWindow", "添加檔案"))
        self.prog_begin.setText(_translate("MainWindow", "0"))
        self.label_4.setText(_translate("MainWindow", "x位置"))
        self.label_5.setText(_translate("MainWindow", "y位置"))
        self.label_6.setText(_translate("MainWindow", "旋轉角度"))
        self.label_7.setText(_translate("MainWindow", "字體大小"))
        self.label_8.setText(_translate("MainWindow", "透明度"))
        self.btn_start.setText(_translate("MainWindow", "批量生成文件水印"))
        self.btn_clearLog.setText(_translate("MainWindow", "清空紀錄"))
        self.label.setText(_translate("MainWindow", "虎胡科技 HuHu Tech 2023 All Rights Reserved."))
        self.label_9.setText(_translate("MainWindow", "水印內容"))
        self.label_10.setText(_translate("MainWindow", "目標檔案"))
        self.label_11.setText(_translate("MainWindow", "無限水印 Batch Watermarking v.0.3"))
        self.label_12.setText(_translate("MainWindow", "設定"))
        self.label_13.setText(_translate("MainWindow", "進度"))
        self.btn_font_path.setText(_translate("MainWindow", "添加檔案"))
        self.label_14.setText(_translate("MainWindow", "字體檔案")) 
        
    def callbackProgress(self,theCmd,hasExecCount,tolCount):
        self.prog_begin.setText("0")
        if tolCount > 0:
            self.progressBar.setValue(int((hasExecCount)*(100/tolCount)))
        
        if hasExecCount != tolCount:
            self.prog_now.setText("目前進行: " +str(hasExecCount)+ " 個任务")
        else:
            self.prog_now.setText("執行完畢")
        
        self.prog_tol.setText(str(tolCount))
        # self.prog_begin.setText("0")
        # if tolCount > 0:
        #     self.progressBar.setValue(int((hasExecCount)*(100/tolCount)))
        #
        # if hasExecCount != tolCount:
        #     self.prog_now.setText("目前执行: " +str(hasExecCount)+ " 个任务")
        # else:
        #     self.prog_now.setText("执行完毕")
        #
        # self.prog_tol.setText(str(tolCount))
        
    def CallFileChoose_TXT(self):
                
        txt_path = self.FileDialog(last_directory='LastTxtPath',fmt=['txt'],isFolder=False)               
        self.input_txt_path.setText(txt_path)
        self.thePath['txt_path'] = txt_path        
        return ''         
       
    def CallFileChoose_PDF(self):
        
        to_path = self.FileDialog(last_directory='LastPDFPath',fmt=['pdf'],isFolder=False)   
        self.input_pdf_path.setText(to_path)
        self.thePath['pdf_path'] = to_path
        return ''     
    
    def CallFileChoose_FONT(self):
        
        to_path = self.FileDialog(last_directory='LastFontPath',fmt=['ttc','ttf'],isFolder=False)   
        self.input_font_path.setText(to_path)
        self.thePath['font_path'] = to_path
        return ''       
                
    def FileDialog(self,last_directory='', forOpen=True, fmt=[''], isFolder=False):
                        
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        options |= QFileDialog.DontUseCustomDirectoryIcons
        # options |= QFileDialog.DontResolveSymlinks
                            
        dialog = QFileDialog()
        dialog.setOptions(options)
        dialog.setOptions(QFileDialog.DontUseCustomDirectoryIcons)
      
            
#         dialog.setFilter(dialog.filter() | QDir.Hidden)
        dialog.setFilter(dialog.filter())
    
        # ARE WE TALKING ABOUT FILES OR FOLDERS
        if isFolder:
            dialog.setFileMode(QFileDialog.DirectoryOnly)
        else:
            dialog.setFileMode(QFileDialog.AnyFile)
        # OPENING OR SAVING
        dialog.setAcceptMode(QFileDialog.AcceptOpen) if forOpen else dialog.setAcceptMode(QFileDialog.AcceptSave)
    
        # SET FORMAT, IF SPECIFIED        
        if isFolder is False:
            # dialog.setDefaultSuffix(fm in fmt)
            # ({"Image files (*.png *.xpm *.jpg)",
            #   "Text files (*.txt)",
            #   "Any files (*)"
            #               });
            fmstr = ''
            for fm in fmt:
                fmstr = fmstr + '*.'+fm+' '
            dialog.setNameFilters([("Text Files ("+fmstr+")")])
                

    
        # SET THE STARTING DIRECTORY           
        settings = QSettings(self.settings_path, QSettings.IniFormat)
        # settings.setValue("LastFilePath",ui.lineEditIPAddr.text())
        directory = settings.value(last_directory)
        
        if directory != '':
            dialog.setDirectory(str(directory))
        else:
            dialog.setDirectory(str(self.LAST_DIR))
    
    
        if dialog.exec_() == QDialog.Accepted:
            path = dialog.selectedFiles()[0]  # returns a list                                   
            
            # 保存当前目录的路径到配置文件中，另外如果不存在'tmp/.temp'文件该函数会自动创建
            # print('打開的路徑----->')
            # print(os.path.dirname(path))
            # print('------------打開的路徑')
            settings.setValue(str(last_directory), os.path.dirname(path))            
             # 将路径设为''程序会使用上一次的路径
            # self.last_path = ''

            return path
        else:
            return ''
                                                   
                    
    # Output Log    
    def onUpdateText(self,text):
        cursor = self.logArea.textCursor()
        cursor.movePosition(QTextCursor.End)
        cursor.insertText(text)
        self.logArea.setTextCursor(cursor)
        self.logArea.ensureCursorVisible()
                       
    # Clear Log
    def ClearLog(self):
        self.logArea.clear()      
        self.progressBar.setValue(0)  
        self.progressBar.setVisible(False)
        
    # Call Core Class
    def CallCoreClass(self):
        self.logArea.clear()
                
        isValid = True        
             
        if 'txt_path' in self.thePath and os.path.isfile(self.thePath['txt_path']):           
            print("TXT Path:" + self.thePath['txt_path'])
        else:
            print("Please Choose TXT Path")    
            isValid = False       
            
        if 'pdf_path' in self.thePath and os.path.isfile(self.thePath['pdf_path']):           
            print("PDF Path:" + self.thePath['pdf_path'])
        else:
            print("Please Choose PDF Path")    
            isValid = False            

        
        self.thePath['water_x'] = self.water_x.value()
        self.thePath['water_y'] = self.water_y.value()
        self.thePath['water_r'] = self.water_r.value()
        self.thePath['water_font_size'] = self.water_font_size.value()
        self.thePath['water_trans'] = self.water_trans.value()

            
        if isValid:       
            print("Start Proceess...")
            self.progressBar.setVisible(True)
            time.sleep(1)       
                                                       
            self.thread = Thread(**self.thePath)                
            self.thread.valueChange.connect(self.callbackProgress)            
            self.thread.start()
                        
        return True         
        
            
class MyThread(QThread):
    signalForText = pyqtSignal(str)
        
    def __init__(self,data=None, parent=None):
        super(MyThread, self).__init__(parent)
        self.data = data

    def write(self, text):
        self.signalForText.emit(str(text))  # 发射信号
        
    
class Thread(QThread):
    #线程值信号
    valueChange = pyqtSignal(str,int,int)
    #构造函数    
                                 
    def __init__(self,**thePath):
        super(Thread, self).__init__()
        self.isPause = False
        self.isCancel=False
        self.cond = QWaitCondition()
        self.mutex = QMutex()    
                
        self.thePath = thePath        
    #暂停
    def pause(self):
        print("线程暂停")
        self.isPause = True
        
    #恢复
    def resume(self):
        print("线程恢复")
        self.isPause = False
        self.cond.wakeAll()
    #取消   
    def cancel(self):
        print("线程取消")
        self.isCancel=True
    #运行(入口)
    def run(self):

        # 獲取應用程序的執行路徑
        appDirPath = os.path.dirname(os.path.abspath(sys.argv[0]))
        # # 前往上一級目錄
        appDirPathPre = os.path.abspath(os.path.join(appDirPath, os.pardir))       
        appDirPathPre2 = os.path.abspath(os.path.join(appDirPathPre, os.pardir))
        appDirPathPre3 = os.path.abspath(os.path.join(appDirPathPre2, os.pardir))

        os.chdir(appDirPath)
        print("改變運行路徑到:" + appDirPath)
        self.settings_path = os.path.join(appDirPathPre3,'Settings.ini')
        print("Settings路徑在:" + self.settings_path)

        has_gen = 0
        t = WatermarkCore(**self.thePath)
        # t.generate_pdf()

        # get pdf name
        pdf_path = os.path.dirname(self.thePath['pdf_path'])
        pdf_filename = os.path.basename(self.thePath['pdf_path'])
        pdf_only_filename = os.path.splitext(pdf_filename)[0]

        with open(self.thePath['txt_path'], 'r') as file:
            for name in file:
                try:
                    # Thread Lock On
                    self.mutex.lock()
                    # print(name.strip())
                    name = name.strip()
                    # pdf_file_out = f"{self.pdf_name_pre}_{name}.pdf"
                    pdf_file_out = f"{pdf_only_filename}_{name}.pdf"
                    t.add_watermark(self.thePath['pdf_path'], t.create_watermark(name), os.path.join(pdf_path,pdf_file_out))
                    print("Generated: " + pdf_file_out +  " OK")
                    has_gen += 1
                    self.valueChange.emit(name,has_gen,has_gen)
                    self.msleep(10)
                    self.mutex.unlock()
                except:
                    print("----------- Exception Occurs")

        print(str(has_gen) + ' 个档案生成完毕')
        print("----------------")
        print("Command + Q 退出")
        has_copied = 0
      
